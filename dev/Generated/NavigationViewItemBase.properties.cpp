// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationViewItemBase.h"

CppWinRTActivatableClassWithDPFactory(NavigationViewItemBase)

GlobalDependencyProperty NavigationViewItemBaseProperties::s_RepeatedIndexProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemBaseProperties::s_SelectionModelProperty{ nullptr };

NavigationViewItemBaseProperties::NavigationViewItemBaseProperties()
{
    EnsureProperties();
}

void NavigationViewItemBaseProperties::EnsureProperties()
{
    if (!s_RepeatedIndexProperty)
    {
        s_RepeatedIndexProperty =
            InitializeDependencyProperty(
                L"RepeatedIndex",
                winrt::name_of<int>(),
                winrt::name_of<winrt::NavigationViewItemBase>(),
                false /* isAttached */,
                ValueHelper<int>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnRepeatedIndexPropertyChanged));
    }
    if (!s_SelectionModelProperty)
    {
        s_SelectionModelProperty =
            InitializeDependencyProperty(
                L"SelectionModel",
                winrt::name_of<winrt::SelectionModel>(),
                winrt::name_of<winrt::NavigationViewItemBase>(),
                false /* isAttached */,
                ValueHelper<winrt::SelectionModel>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSelectionModelPropertyChanged));
    }
}

void NavigationViewItemBaseProperties::ClearProperties()
{
    s_RepeatedIndexProperty = nullptr;
    s_SelectionModelProperty = nullptr;
}

void NavigationViewItemBaseProperties::OnRepeatedIndexPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationViewItemBase>();
    winrt::get_self<NavigationViewItemBase>(owner)->OnRepeatedIndexPropertyChanged(args);
}

void NavigationViewItemBaseProperties::OnSelectionModelPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationViewItemBase>();
    winrt::get_self<NavigationViewItemBase>(owner)->OnSelectionModelPropertyChanged(args);
}

void NavigationViewItemBaseProperties::RepeatedIndex(int value)
{
    static_cast<NavigationViewItemBase*>(this)->SetValue(s_RepeatedIndexProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int NavigationViewItemBaseProperties::RepeatedIndex()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<NavigationViewItemBase*>(this)->GetValue(s_RepeatedIndexProperty));
}

void NavigationViewItemBaseProperties::SelectionModel(winrt::SelectionModel const& value)
{
    static_cast<NavigationViewItemBase*>(this)->SetValue(s_SelectionModelProperty, ValueHelper<winrt::SelectionModel>::BoxValueIfNecessary(value));
}

winrt::SelectionModel NavigationViewItemBaseProperties::SelectionModel()
{
    return ValueHelper<winrt::SelectionModel>::CastOrUnbox(static_cast<NavigationViewItemBase*>(this)->GetValue(s_SelectionModelProperty));
}
