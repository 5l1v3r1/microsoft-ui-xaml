// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NonVirtualizingStackLayout.h"

CppWinRTActivatableClassWithDPFactory(NonVirtualizingStackLayout)

GlobalDependencyProperty NonVirtualizingStackLayoutProperties::s_OrientationProperty{ nullptr };

NonVirtualizingStackLayoutProperties::NonVirtualizingStackLayoutProperties()
{
    EnsureProperties();
}

void NonVirtualizingStackLayoutProperties::EnsureProperties()
{
    if (!s_OrientationProperty)
    {
        s_OrientationProperty =
            InitializeDependencyProperty(
                L"Orientation",
                winrt::name_of<winrt::Orientation>(),
                winrt::name_of<winrt::NonVirtualizingStackLayout>(),
                false /* isAttached */,
                ValueHelper<winrt::Orientation>::BoxValueIfNecessary(winrt::Orientation::Vertical),
                winrt::PropertyChangedCallback(&OnOrientationPropertyChanged));
    }
}

void NonVirtualizingStackLayoutProperties::ClearProperties()
{
    s_OrientationProperty = nullptr;
}

void NonVirtualizingStackLayoutProperties::OnOrientationPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NonVirtualizingStackLayout>();
    winrt::get_self<NonVirtualizingStackLayout>(owner)->OnOrientationPropertyChanged(args);
}

void NonVirtualizingStackLayoutProperties::Orientation(winrt::Orientation const& value)
{
    static_cast<NonVirtualizingStackLayout*>(this)->SetValue(s_OrientationProperty, ValueHelper<winrt::Orientation>::BoxValueIfNecessary(value));
}

winrt::Orientation NonVirtualizingStackLayoutProperties::Orientation()
{
    return ValueHelper<winrt::Orientation>::CastOrUnbox(static_cast<NonVirtualizingStackLayout*>(this)->GetValue(s_OrientationProperty));
}
