// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NumberBox.h"

CppWinRTActivatableClassWithDPFactory(NumberBox)

GlobalDependencyProperty NumberBoxProperties::s_AcceptsCalculationProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_BasicValidationModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_FractionDigitsProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HeaderProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HyperScrollEnabledProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_IncrementPrecisionProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_IntegerDigitsProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_IsDecimalPointAlwaysDisplayedProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_IsZeroSignedProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MaxValueProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MinMaxModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MinValueProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_NumberRounderProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_PlaceholderTextProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_RoundingAlgorithmProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SignificantDigitPrecisionProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SignificantDigitsProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SpinButtonPlacementModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_StepFrequencyProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_TextProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_ValueProperty{ nullptr };

NumberBoxProperties::NumberBoxProperties()
    : m_valueChangedEventSource{static_cast<NumberBox*>(this)}
{
    EnsureProperties();
}

void NumberBoxProperties::EnsureProperties()
{
    if (!s_AcceptsCalculationProperty)
    {
        s_AcceptsCalculationProperty =
            InitializeDependencyProperty(
                L"AcceptsCalculation",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                nullptr);
    }
    if (!s_BasicValidationModeProperty)
    {
        s_BasicValidationModeProperty =
            InitializeDependencyProperty(
                L"BasicValidationMode",
                winrt::name_of<winrt::NumberBoxBasicValidationMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxBasicValidationMode>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBasicValidationModePropertyChanged));
    }
    if (!s_FractionDigitsProperty)
    {
        s_FractionDigitsProperty =
            InitializeDependencyProperty(
                L"FractionDigits",
                winrt::name_of<int>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnFractionDigitsPropertyChanged));
    }
    if (!s_HeaderProperty)
    {
        s_HeaderProperty =
            InitializeDependencyProperty(
                L"Header",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnHeaderPropertyChanged));
    }
    if (!s_HyperScrollEnabledProperty)
    {
        s_HyperScrollEnabledProperty =
            InitializeDependencyProperty(
                L"HyperScrollEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                nullptr);
    }
    if (!s_IncrementPrecisionProperty)
    {
        s_IncrementPrecisionProperty =
            InitializeDependencyProperty(
                L"IncrementPrecision",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(1),
                winrt::PropertyChangedCallback(&OnIncrementPrecisionPropertyChanged));
    }
    if (!s_IntegerDigitsProperty)
    {
        s_IntegerDigitsProperty =
            InitializeDependencyProperty(
                L"IntegerDigits",
                winrt::name_of<int>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(1),
                winrt::PropertyChangedCallback(&OnIntegerDigitsPropertyChanged));
    }
    if (!s_IsDecimalPointAlwaysDisplayedProperty)
    {
        s_IsDecimalPointAlwaysDisplayedProperty =
            InitializeDependencyProperty(
                L"IsDecimalPointAlwaysDisplayed",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsDecimalPointAlwaysDisplayedPropertyChanged));
    }
    if (!s_IsZeroSignedProperty)
    {
        s_IsZeroSignedProperty =
            InitializeDependencyProperty(
                L"IsZeroSigned",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsZeroSignedPropertyChanged));
    }
    if (!s_MaxValueProperty)
    {
        s_MaxValueProperty =
            InitializeDependencyProperty(
                L"MaxValue",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                nullptr);
    }
    if (!s_MinMaxModeProperty)
    {
        s_MinMaxModeProperty =
            InitializeDependencyProperty(
                L"MinMaxMode",
                winrt::name_of<winrt::NumberBoxMinMaxMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxMinMaxMode>::BoxValueIfNecessary(winrt::NumberBoxMinMaxMode::None),
                nullptr);
    }
    if (!s_MinValueProperty)
    {
        s_MinValueProperty =
            InitializeDependencyProperty(
                L"MinValue",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                nullptr);
    }
    if (!s_NumberRounderProperty)
    {
        s_NumberRounderProperty =
            InitializeDependencyProperty(
                L"NumberRounder",
                winrt::name_of<winrt::NumberBoxNumberRounder>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxNumberRounder>::BoxValueIfNecessary(winrt::NumberBoxNumberRounder::None),
                winrt::PropertyChangedCallback(&OnNumberRounderPropertyChanged));
    }
    if (!s_PlaceholderTextProperty)
    {
        s_PlaceholderTextProperty =
            InitializeDependencyProperty(
                L"PlaceholderText",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPlaceholderTextPropertyChanged));
    }
    if (!s_RoundingAlgorithmProperty)
    {
        s_RoundingAlgorithmProperty =
            InitializeDependencyProperty(
                L"RoundingAlgorithm",
                winrt::name_of<winrt::RoundingAlgorithm>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::RoundingAlgorithm>::BoxValueIfNecessary(winrt::RoundingAlgorithm::RoundAwayFromZero),
                winrt::PropertyChangedCallback(&OnRoundingAlgorithmPropertyChanged));
    }
    if (!s_SignificantDigitPrecisionProperty)
    {
        s_SignificantDigitPrecisionProperty =
            InitializeDependencyProperty(
                L"SignificantDigitPrecision",
                winrt::name_of<int>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(1),
                winrt::PropertyChangedCallback(&OnSignificantDigitPrecisionPropertyChanged));
    }
    if (!s_SignificantDigitsProperty)
    {
        s_SignificantDigitsProperty =
            InitializeDependencyProperty(
                L"SignificantDigits",
                winrt::name_of<int>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnSignificantDigitsPropertyChanged));
    }
    if (!s_SpinButtonPlacementModeProperty)
    {
        s_SpinButtonPlacementModeProperty =
            InitializeDependencyProperty(
                L"SpinButtonPlacementMode",
                winrt::name_of<winrt::NumberBoxSpinButtonPlacementMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(winrt::NumberBoxSpinButtonPlacementMode::Hidden),
                winrt::PropertyChangedCallback(&OnSpinButtonPlacementModePropertyChanged));
    }
    if (!s_StepFrequencyProperty)
    {
        s_StepFrequencyProperty =
            InitializeDependencyProperty(
                L"StepFrequency",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(1),
                nullptr);
    }
    if (!s_TextProperty)
    {
        s_TextProperty =
            InitializeDependencyProperty(
                L"Text",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnTextPropertyChanged));
    }
    if (!s_ValueProperty)
    {
        s_ValueProperty =
            InitializeDependencyProperty(
                L"Value",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnValuePropertyChanged));
    }
}

void NumberBoxProperties::ClearProperties()
{
    s_AcceptsCalculationProperty = nullptr;
    s_BasicValidationModeProperty = nullptr;
    s_FractionDigitsProperty = nullptr;
    s_HeaderProperty = nullptr;
    s_HyperScrollEnabledProperty = nullptr;
    s_IncrementPrecisionProperty = nullptr;
    s_IntegerDigitsProperty = nullptr;
    s_IsDecimalPointAlwaysDisplayedProperty = nullptr;
    s_IsZeroSignedProperty = nullptr;
    s_MaxValueProperty = nullptr;
    s_MinMaxModeProperty = nullptr;
    s_MinValueProperty = nullptr;
    s_NumberRounderProperty = nullptr;
    s_PlaceholderTextProperty = nullptr;
    s_RoundingAlgorithmProperty = nullptr;
    s_SignificantDigitPrecisionProperty = nullptr;
    s_SignificantDigitsProperty = nullptr;
    s_SpinButtonPlacementModeProperty = nullptr;
    s_StepFrequencyProperty = nullptr;
    s_TextProperty = nullptr;
    s_ValueProperty = nullptr;
}

void NumberBoxProperties::OnBasicValidationModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnBasicValidationModePropertyChanged(args);
}

void NumberBoxProperties::OnFractionDigitsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnFractionDigitsPropertyChanged(args);
}

void NumberBoxProperties::OnHeaderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnHeaderPropertyChanged(args);
}

void NumberBoxProperties::OnIncrementPrecisionPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnIncrementPrecisionPropertyChanged(args);
}

void NumberBoxProperties::OnIntegerDigitsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnIntegerDigitsPropertyChanged(args);
}

void NumberBoxProperties::OnIsDecimalPointAlwaysDisplayedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnIsDecimalPointAlwaysDisplayedPropertyChanged(args);
}

void NumberBoxProperties::OnIsZeroSignedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnIsZeroSignedPropertyChanged(args);
}

void NumberBoxProperties::OnNumberRounderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnNumberRounderPropertyChanged(args);
}

void NumberBoxProperties::OnPlaceholderTextPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPlaceholderTextPropertyChanged(args);
}

void NumberBoxProperties::OnRoundingAlgorithmPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnRoundingAlgorithmPropertyChanged(args);
}

void NumberBoxProperties::OnSignificantDigitPrecisionPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnSignificantDigitPrecisionPropertyChanged(args);
}

void NumberBoxProperties::OnSignificantDigitsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnSignificantDigitsPropertyChanged(args);
}

void NumberBoxProperties::OnSpinButtonPlacementModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnSpinButtonPlacementModePropertyChanged(args);
}

void NumberBoxProperties::OnTextPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnTextPropertyChanged(args);
}

void NumberBoxProperties::OnValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnValuePropertyChanged(args);
}

void NumberBoxProperties::AcceptsCalculation(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_AcceptsCalculationProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::AcceptsCalculation()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_AcceptsCalculationProperty));
}

void NumberBoxProperties::BasicValidationMode(winrt::NumberBoxBasicValidationMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_BasicValidationModeProperty, ValueHelper<winrt::NumberBoxBasicValidationMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxBasicValidationMode NumberBoxProperties::BasicValidationMode()
{
    return ValueHelper<winrt::NumberBoxBasicValidationMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_BasicValidationModeProperty));
}

void NumberBoxProperties::FractionDigits(int value)
{
    static_cast<NumberBox*>(this)->SetValue(s_FractionDigitsProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int NumberBoxProperties::FractionDigits()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_FractionDigitsProperty));
}

void NumberBoxProperties::Header(winrt::hstring const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_HeaderProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring NumberBoxProperties::Header()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HeaderProperty));
}

void NumberBoxProperties::HyperScrollEnabled(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_HyperScrollEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::HyperScrollEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HyperScrollEnabledProperty));
}

void NumberBoxProperties::IncrementPrecision(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_IncrementPrecisionProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::IncrementPrecision()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_IncrementPrecisionProperty));
}

void NumberBoxProperties::IntegerDigits(int value)
{
    static_cast<NumberBox*>(this)->SetValue(s_IntegerDigitsProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int NumberBoxProperties::IntegerDigits()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_IntegerDigitsProperty));
}

void NumberBoxProperties::IsDecimalPointAlwaysDisplayed(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_IsDecimalPointAlwaysDisplayedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::IsDecimalPointAlwaysDisplayed()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_IsDecimalPointAlwaysDisplayedProperty));
}

void NumberBoxProperties::IsZeroSigned(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_IsZeroSignedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::IsZeroSigned()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_IsZeroSignedProperty));
}

void NumberBoxProperties::MaxValue(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MaxValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::MaxValue()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MaxValueProperty));
}

void NumberBoxProperties::MinMaxMode(winrt::NumberBoxMinMaxMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MinMaxModeProperty, ValueHelper<winrt::NumberBoxMinMaxMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxMinMaxMode NumberBoxProperties::MinMaxMode()
{
    return ValueHelper<winrt::NumberBoxMinMaxMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MinMaxModeProperty));
}

void NumberBoxProperties::MinValue(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MinValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::MinValue()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MinValueProperty));
}

void NumberBoxProperties::NumberRounder(winrt::NumberBoxNumberRounder const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_NumberRounderProperty, ValueHelper<winrt::NumberBoxNumberRounder>::BoxValueIfNecessary(value));
}

winrt::NumberBoxNumberRounder NumberBoxProperties::NumberRounder()
{
    return ValueHelper<winrt::NumberBoxNumberRounder>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_NumberRounderProperty));
}

void NumberBoxProperties::PlaceholderText(winrt::hstring const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_PlaceholderTextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring NumberBoxProperties::PlaceholderText()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_PlaceholderTextProperty));
}

void NumberBoxProperties::RoundingAlgorithm(winrt::RoundingAlgorithm const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_RoundingAlgorithmProperty, ValueHelper<winrt::RoundingAlgorithm>::BoxValueIfNecessary(value));
}

winrt::RoundingAlgorithm NumberBoxProperties::RoundingAlgorithm()
{
    return ValueHelper<winrt::RoundingAlgorithm>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_RoundingAlgorithmProperty));
}

void NumberBoxProperties::SignificantDigitPrecision(int value)
{
    static_cast<NumberBox*>(this)->SetValue(s_SignificantDigitPrecisionProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int NumberBoxProperties::SignificantDigitPrecision()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SignificantDigitPrecisionProperty));
}

void NumberBoxProperties::SignificantDigits(int value)
{
    static_cast<NumberBox*>(this)->SetValue(s_SignificantDigitsProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int NumberBoxProperties::SignificantDigits()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SignificantDigitsProperty));
}

void NumberBoxProperties::SpinButtonPlacementMode(winrt::NumberBoxSpinButtonPlacementMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_SpinButtonPlacementModeProperty, ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxSpinButtonPlacementMode NumberBoxProperties::SpinButtonPlacementMode()
{
    return ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SpinButtonPlacementModeProperty));
}

void NumberBoxProperties::StepFrequency(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_StepFrequencyProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::StepFrequency()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_StepFrequencyProperty));
}

void NumberBoxProperties::Text(winrt::hstring const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_TextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring NumberBoxProperties::Text()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_TextProperty));
}

void NumberBoxProperties::Value(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_ValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::Value()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_ValueProperty));
}

winrt::event_token NumberBoxProperties::ValueChanged(winrt::TypedEventHandler<winrt::NumberBox, winrt::IInspectable> const& value)
{
    return m_valueChangedEventSource.add(value);
}

void NumberBoxProperties::ValueChanged(winrt::event_token const& token)
{
    m_valueChangedEventSource.remove(token);
}
